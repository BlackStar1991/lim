// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$basket-name: 'basket';
$basket-x: 101px;
$basket-y: 30px;
$basket-offset-x: -101px;
$basket-offset-y: -30px;
$basket-width: 30px;
$basket-height: 31px;
$basket-total-width: 143px;
$basket-total-height: 85px;
$basket-image: '../image/sprite.png';
$basket: (101px, 30px, -101px, -30px, 30px, 31px, 143px, 85px, '../image/sprite.png', 'basket', );
$btn-facebook-name: 'btn-facebook';
$btn-facebook-x: 0px;
$btn-facebook-y: 60px;
$btn-facebook-offset-x: 0px;
$btn-facebook-offset-y: -60px;
$btn-facebook-width: 71px;
$btn-facebook-height: 25px;
$btn-facebook-total-width: 143px;
$btn-facebook-total-height: 85px;
$btn-facebook-image: '../image/sprite.png';
$btn-facebook: (0px, 60px, 0px, -60px, 71px, 25px, 143px, 85px, '../image/sprite.png', 'btn-facebook', );
$btn-google-plus-name: 'btn-googlePlus';
$btn-google-plus-x: 101px;
$btn-google-plus-y: 0px;
$btn-google-plus-offset-x: -101px;
$btn-google-plus-offset-y: 0px;
$btn-google-plus-width: 42px;
$btn-google-plus-height: 25px;
$btn-google-plus-total-width: 143px;
$btn-google-plus-total-height: 85px;
$btn-google-plus-image: '../image/sprite.png';
$btn-google-plus: (101px, 0px, -101px, 0px, 42px, 25px, 143px, 85px, '../image/sprite.png', 'btn-googlePlus', );
$btn-like-name: 'btn-like';
$btn-like-x: 0px;
$btn-like-y: 30px;
$btn-like-offset-x: 0px;
$btn-like-offset-y: -30px;
$btn-like-width: 74px;
$btn-like-height: 25px;
$btn-like-total-width: 143px;
$btn-like-total-height: 85px;
$btn-like-image: '../image/sprite.png';
$btn-like: (0px, 30px, 0px, -30px, 74px, 25px, 143px, 85px, '../image/sprite.png', 'btn-like', );
$btn-twitter-name: 'btn-twitter';
$btn-twitter-x: 0px;
$btn-twitter-y: 0px;
$btn-twitter-offset-x: 0px;
$btn-twitter-offset-y: 0px;
$btn-twitter-width: 96px;
$btn-twitter-height: 25px;
$btn-twitter-total-width: 143px;
$btn-twitter-total-height: 85px;
$btn-twitter-image: '../image/sprite.png';
$btn-twitter: (0px, 0px, 0px, 0px, 96px, 25px, 143px, 85px, '../image/sprite.png', 'btn-twitter', );
$call-name: 'call';
$call-x: 101px;
$call-y: 66px;
$call-offset-x: -101px;
$call-offset-y: -66px;
$call-width: 16px;
$call-height: 17px;
$call-total-width: 143px;
$call-total-height: 85px;
$call-image: '../image/sprite.png';
$call: (101px, 66px, -101px, -66px, 16px, 17px, 143px, 85px, '../image/sprite.png', 'call', );
$search-name: 'search';
$search-x: 122px;
$search-y: 66px;
$search-offset-x: -122px;
$search-offset-y: -66px;
$search-width: 16px;
$search-height: 16px;
$search-total-width: 143px;
$search-total-height: 85px;
$search-image: '../image/sprite.png';
$search: (122px, 66px, -122px, -66px, 16px, 16px, 143px, 85px, '../image/sprite.png', 'search', );
$spritesheet-width: 143px;
$spritesheet-height: 85px;
$spritesheet-image: '../image/sprite.png';
$spritesheet-sprites: ($basket, $btn-facebook, $btn-google-plus, $btn-like, $btn-twitter, $call, $search, );
$spritesheet: (143px, 85px, '../image/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
